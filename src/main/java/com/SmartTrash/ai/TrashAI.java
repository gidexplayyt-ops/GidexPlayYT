package com.smarttrash.ai;

import com.smarttrash.SmartTrash;
import com.smarttrash.managers.StatsManager;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.*;

public class TrashAI {

    private final Map<Material, String> materialCategories;
    private final Random random;
    private final StatsManager statsManager;
    private final Map<Material, Double> impactMap;
    private final Map<String, String> displayNames;

    public TrashAI() {
        this.random = new Random();
        this.statsManager = SmartTrash.getInstance().getStatsManager();
        this.materialCategories = new HashMap<>();
        this.impactMap = new HashMap<>();
        this.displayNames = new HashMap<>();
        initializeAICategories();
        initializeImpactMap();
        initializeDisplayNames();
    }

    private void initializeAICategories() {
        // AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ 2025 - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        materialCategories.put(Material.GLASS_BOTTLE, "nanoplastic");
        materialCategories.put(Material.POTION, "nanoplastic");
        materialCategories.put(Material.HONEY_BOTTLE, "nanoplastic");

        materialCategories.put(Material.IRON_INGOT, "quantum_waste");
        materialCategories.put(Material.GOLD_INGOT, "quantum_waste");
        materialCategories.put(Material.DIAMOND, "quantum_waste");
        materialCategories.put(Material.NETHERITE_INGOT, "quantum_waste");
        materialCategories.put(Material.COPPER_INGOT, "quantum_waste");

        materialCategories.put(Material.PRISMARINE_CRYSTALS, "holographic");
        materialCategories.put(Material.AMETHYST_SHARD, "holographic");
        materialCategories.put(Material.QUARTZ, "holographic");
        materialCategories.put(Material.ENDER_PEARL, "holographic");

        materialCategories.put(Material.NETHER_STAR, "biotech");
        materialCategories.put(Material.DRAGON_BREATH, "biotech");
        materialCategories.put(Material.PHANTOM_MEMBRANE, "biotech");
        materialCategories.put(Material.SCULK_CATALYST, "biotech");

        materialCategories.put(Material.GLOWSTONE_DUST, "energy_cells");
        materialCategories.put(Material.REDSTONE, "energy_cells");
        materialCategories.put(Material.BLAZE_POWDER, "energy_cells");
        materialCategories.put(Material.GUNPOWDER, "energy_cells");

        materialCategories.put(Material.CLOCK, "ai_components");
        materialCategories.put(Material.COMPASS, "ai_components");
        materialCategories.put(Material.RECOVERY_COMPASS, "ai_components");
        materialCategories.put(Material.SCULK_SENSOR, "ai_components");
        materialCategories.put(Material.CALIBRATED_SCULK_SENSOR, "ai_components");
    }

    private void initializeImpactMap() {
        // –†–∞—Å—á–µ—Ç —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è 2025 - –∏—Å–ø–æ–ª—å–∑—É–µ–º HashMap
        impactMap.put(Material.GLASS_BOTTLE, 0.8);
        impactMap.put(Material.POTION, 1.2);
        impactMap.put(Material.HONEY_BOTTLE, 1.5);
        impactMap.put(Material.IRON_INGOT, 8.9);
        impactMap.put(Material.GOLD_INGOT, 15.2);
        impactMap.put(Material.DIAMOND, 25.0);
        impactMap.put(Material.NETHERITE_INGOT, 35.0);
        impactMap.put(Material.COPPER_INGOT, 7.1);
        impactMap.put(Material.PRISMARINE_CRYSTALS, 6.8);
        impactMap.put(Material.AMETHYST_SHARD, 4.5);
        impactMap.put(Material.QUARTZ, 5.4);
        impactMap.put(Material.ENDER_PEARL, 10.5);
        impactMap.put(Material.NETHER_STAR, 12.5);
        impactMap.put(Material.DRAGON_BREATH, 18.7);
        impactMap.put(Material.PHANTOM_MEMBRANE, 3.2);
        impactMap.put(Material.SCULK_CATALYST, 14.3);
        impactMap.put(Material.GLOWSTONE_DUST, 4.2);
        impactMap.put(Material.REDSTONE, 3.9);
        impactMap.put(Material.BLAZE_POWDER, 6.1);
        impactMap.put(Material.GUNPOWDER, 2.8);
        impactMap.put(Material.CLOCK, 9.7);
        impactMap.put(Material.COMPASS, 8.3);
        impactMap.put(Material.RECOVERY_COMPASS, 11.2);
        impactMap.put(Material.SCULK_SENSOR, 13.8);
        impactMap.put(Material.CALIBRATED_SCULK_SENSOR, 16.5);
    }

    private void initializeDisplayNames() {
        displayNames.put("nanoplastic", "¬ßb–ù–∞–Ω–æ-–ü–ª–∞—Å—Ç–∏–∫");
        displayNames.put("quantum_waste", "¬ßd–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –û—Ç—Ö–æ–¥—ã");
        displayNames.put("holographic", "¬ß9–ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ");
        displayNames.put("biotech", "¬ßa–ë–∏–æ-–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏");
        displayNames.put("energy_cells", "¬ße–≠–Ω–µ—Ä–≥–æ-–Ø—á–µ–π–∫–∏");
        displayNames.put("ai_components", "¬ßcAI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã");
    }

    public void analyzeInventory(Player player) {
        List<AITrashItem> detectedItems = new ArrayList<>();
        int totalItems = 0;
        int trashItems = 0;

        player.sendMessage(" ");
        player.sendMessage("¬ßdü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...");
        player.playSound(player.getLocation(), Sound.BLOCK_BEACON_AMBIENT, 1.0f, 1.2f);

        // AI –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && !item.getType().isAir()) {
                AITrashItem trashItem = analyzeItem(item);
                if (trashItem != null) {
                    detectedItems.add(trashItem);
                    trashItems++;
                }
                totalItems++;
            }
        }

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        showAIAnalysis(player, detectedItems, totalItems, trashItems);
    }

    private AITrashItem analyzeItem(ItemStack item) {
        String category = materialCategories.get(item.getType());
        if (category != null) {
            double aiConfidence = 0.7 + (random.nextDouble() * 0.3); // 70-100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            double co2Impact = calculateCO2Impact(item.getType());
            int itemAmount = item.getAmount();

            return new AITrashItem(
                    item.getType(),
                    getItemName(item),
                    category,
                    aiConfidence,
                    co2Impact,
                    itemAmount,
                    System.currentTimeMillis()
            );
        }
        return null;
    }

    private double calculateCO2Impact(Material material) {
        return impactMap.getOrDefault(material, 2.0);
    }

    private String getItemName(ItemStack item) {
        ItemMeta meta = item.getItemMeta();
        return meta != null && meta.hasDisplayName() ?
                meta.getDisplayName() : formatMaterialName(item.getType());
    }

    private String formatMaterialName(Material material) {
        String name = material.name().toLowerCase();
        return Arrays.stream(name.split("_"))
                .map(word -> word.substring(0, 1).toUpperCase() + word.substring(1))
                .reduce((a, b) -> a + " " + b)
                .orElse(name);
    }

    private void showAIAnalysis(Player player, List<AITrashItem> items, int totalItems, int trashItems) {
        player.sendMessage("¬ßd‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        player.sendMessage("¬ßd‚ïë        ü§ñ AI –ê–ù–ê–õ–ò–ó 2025     ‚ïë");
        player.sendMessage("¬ßd‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        player.sendMessage("¬ß7üì¶ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ¬ße" + totalItems);
        player.sendMessage("¬ß7üóë –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º—É—Å–æ—Ä–∞: ¬ßa" + trashItems);

        if (totalItems > 0) {
            double trashPercentage = ((double) trashItems / totalItems) * 100;
            player.sendMessage("¬ß7üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º—É—Å–æ—Ä–∞: ¬ß6" + String.format("%.1f", trashPercentage) + "%");
        }
        player.sendMessage(" ");

        if (items.isEmpty()) {
            player.sendMessage("¬ßc‚ùå –ú—É—Å–æ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!");
            player.sendMessage("¬ßaüíö –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç!");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_YES, 1.0f, 1.0f);
            return;
        }

        // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        Map<String, Integer> categoryCount = new HashMap<>();
        Map<String, Double> categoryConfidence = new HashMap<>();
        Map<String, Double> categoryCO2 = new HashMap<>();
        Map<String, Integer> categoryAmount = new HashMap<>();

        for (AITrashItem item : items) {
            categoryCount.merge(item.getCategory(), 1, Integer::sum);
            categoryConfidence.merge(item.getCategory(), item.getConfidence(), Double::sum);
            categoryCO2.merge(item.getCategory(), item.getCo2Impact() * item.getAmount(), Double::sum);
            categoryAmount.merge(item.getCategory(), item.getAmount(), Integer::sum);
        }

        player.sendMessage("¬ß6üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");
        categoryCount.entrySet().stream()
                .sorted((a, b) -> b.getValue().compareTo(a.getValue()))
                .forEach(entry -> {
                    String categoryName = getCategoryDisplayName(entry.getKey());
                    double avgConfidence = categoryConfidence.get(entry.getKey()) / entry.getValue();
                    String confidenceColor = avgConfidence > 0.8 ? "¬ßa" : avgConfidence > 0.6 ? "¬ße" : "¬ßc";
                    int totalAmount = categoryAmount.get(entry.getKey());
                    double totalCO2 = categoryCO2.get(entry.getKey());

                    player.sendMessage("¬ß7- " + categoryName + ": ¬ßa" + totalAmount + " —à—Ç. " +
                            confidenceColor + "(" + (int)(avgConfidence * 100) + "% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)");
                    player.sendMessage("  ¬ß7–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è CO2: ¬ße" + String.format("%.1f", totalCO2) + " –∫–≥");
                });

        // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —ç–∫–æ–Ω–æ–º–∏–∏
        double totalPotentialCO2 = categoryCO2.values().stream().mapToDouble(Double::doubleValue).sum();

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI
        player.sendMessage(" ");
        player.sendMessage("¬ßbüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI:");
        player.sendMessage("¬ß7- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬ße/trash ¬ß7–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏");
        player.sendMessage("¬ß7- –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ¬ßa" +
                getCategoryDisplayName(getMostCommonCategory(categoryCount)));
        player.sendMessage("¬ß7- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è CO2: ¬ße" + String.format("%.1f", totalPotentialCO2) + " –∫–≥");
        player.sendMessage("¬ß7- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: ¬ßb" + getRecyclingStrategy(categoryCount));

        player.playSound(player.getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.5f);
    }

    private String getCategoryDisplayName(String categoryKey) {
        return displayNames.getOrDefault(categoryKey, "¬ß7–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
    }

    private String getMostCommonCategory(Map<String, Integer> categoryCount) {
        return categoryCount.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse("nanoplastic");
    }

    private String getRecyclingStrategy(Map<String, Integer> categoryCount) {
        String mostCommon = getMostCommonCategory(categoryCount);

        switch (mostCommon) {
            case "nanoplastic":
                return "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–Ω–æ-–ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏";
            case "quantum_waste":
                return "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é";
            case "holographic":
                return "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤";
            case "biotech":
                return "–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ";
            case "energy_cells":
                return "–≠–Ω–µ—Ä–≥–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞";
            case "ai_components":
                return "AI-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞";
            default:
                return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞";
        }
    }

    // –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
    public static class AITrashItem {
        private final Material material;
        private final String name;
        private final String category;
        private final double confidence;
        private final double co2Impact;
        private final int amount;
        private final long timestamp;

        public AITrashItem(Material material, String name, String category,
                           double confidence, double co2Impact, int amount, long timestamp) {
            this.material = material;
            this.name = name;
            this.category = category;
            this.confidence = confidence;
            this.co2Impact = co2Impact;
            this.amount = amount;
            this.timestamp = timestamp;
        }

        public Material getMaterial() { return material; }
        public String getName() { return name; }
        public String getCategory() { return category; }
        public double getConfidence() { return confidence; }
        public double getCo2Impact() { return co2Impact; }
        public int getAmount() { return amount; }
        public long getTimestamp() { return timestamp; }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

    /**
     * –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    public void deepAnalyzeItem(Player player, ItemStack item) {
        AITrashItem trashItem = analyzeItem(item);

        if (trashItem != null) {
            player.sendMessage("¬ßdüîç –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞:");
            player.sendMessage("¬ß7–ù–∞–∑–≤–∞–Ω–∏–µ: ¬ßf" + trashItem.getName());
            player.sendMessage("¬ß7–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + getCategoryDisplayName(trashItem.getCategory()));
            player.sendMessage("¬ß7–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: ¬ßa" + (int)(trashItem.getConfidence() * 100) + "%");
            player.sendMessage("¬ß7–≠–∫–æ–Ω–æ–º–∏—è CO2: ¬ße" + trashItem.getCo2Impact() + " –∫–≥/—à—Ç");
            player.sendMessage("¬ß7–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏: ¬ßb" + getRecyclingPotential(trashItem));
        } else {
            player.sendMessage("¬ßa‚úÖ –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏");
        }
    }

    private String getRecyclingPotential(AITrashItem item) {
        if (item.getCo2Impact() > 10) return "¬ßc–í—ã—Å–æ–∫–∏–π";
        if (item.getCo2Impact() > 5) return "¬ße–°—Ä–µ–¥–Ω–∏–π";
        return "¬ßa–ù–∏–∑–∫–∏–π";
    }

    /**
     * –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
     */
    public void comparativeAnalysis(Player player) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
        player.sendMessage("¬ß6üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:");
        player.sendMessage("¬ß7–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏: ¬ßa85%");
        player.sendMessage("¬ß7–°—Ä–µ–¥–Ω–∏–π –ø–æ —Å–µ—Ä–≤–µ—Ä—É: ¬ße72%");
        player.sendMessage("¬ß7–õ—É—á—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: ¬ßb94%");
        player.sendMessage("¬ß7–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: ¬ß6#12");
    }
}