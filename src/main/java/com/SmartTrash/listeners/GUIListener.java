package com.smarttrash.listeners;

import com.smarttrash.SmartTrash;
import com.smarttrash.gui.TrashGUI;
import com.smarttrash.managers.StatsManager;
import com.smarttrash.models.TrashCategory2025;
import org.bukkit.ChatColor;
import org.bukkit.Sound;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.ItemStack;

public class GUIListener implements Listener {

    private final TrashGUI guiManager;
    private final StatsManager statsManager;

    public GUIListener() {
        this.guiManager = SmartTrash.getInstance().getGuiManager();
        this.statsManager = SmartTrash.getInstance().getStatsManager();
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player player)) return;

        String title = event.getView().getTitle();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if (title.equals("üöÄ –£–º–Ω–∞—è –ú—É—Å–æ—Ä–∫–∞ 2025")) {
            event.setCancelled(true);
            handleMainMenuClick(player, event.getCurrentItem());
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
        else if (title.equals("‚öõ  Ô∏è–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞")) {
            event.setCancelled(true);
            handleQuantumMenuClick(player, event.getCurrentItem());
        }
    }

    private void handleMainMenuClick(Player player, ItemStack clicked) {
        if (clicked == null) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—É—Å–æ—Ä–∞
        if (isCategoryItem(clicked.getType())) {
            handleCategoryClick(player, clicked);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        else if (clicked.getType() == Material.ENDER_EYE) {
            SmartTrash.getInstance().getTrashAI().analyzeInventory(player);
            player.closeInventory();
        }
        else if (clicked.getType() == Material.ENCHANTED_BOOK) {
            statsManager.showAdvancedStats(player);
            player.closeInventory();
        }
        else if (clicked.getType() == Material.NETHER_STAR) {
            if (player.hasPermission("smarttrash.quantum")) {
                SmartTrash.getInstance().getQuantumRecycler().openQuantumMenu(player);
            } else {
                player.sendMessage("üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏!");
                player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            }
        }
        else if (clicked.getType() == Material.HOPPER) {
            player.sendMessage("üîß ¬ßa–ê–≤—Ç–æ-—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!");
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ-—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            player.closeInventory();
        }
        else if (clicked.getType() == Material.COMMAND_BLOCK) {
            if (player.hasPermission("smarttrash.test")) {
                SmartTrash.getInstance().getTrashTester().runTests(player);
            } else {
                player.sendMessage("üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!");
            }
            player.closeInventory();
        }
    }

    private void handleQuantumMenuClick(Player player, ItemStack clicked) {
        if (clicked == null) return;

        if (clicked.getType() == Material.NETHER_STAR) {
            player.sendMessage("‚ú® ¬ßd–ó–∞–ø—É—â–µ–Ω–∞ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞!");
            player.playSound(player.getLocation(), Sound.ENTITY_ENDER_DRAGON_FLAP, 1.0f, 1.5f);
        }
        else if (clicked.getType() == Material.GLOWSTONE_DUST) {
            player.sendMessage("üîã¬ße–ë—É—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
            player.playSound(player.getLocation(), Sound.BLOCK_BEACON_ACTIVATE, 1.0f, 1.2f);
        }
        else if (clicked.getType() == Material.ENDER_PEARL) {
            player.sendMessage("üîÑ ¬ßb–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–∞—Ç–µ—Ä–∏–∏ –∑–∞–ø—É—â–µ–Ω!");
            player.playSound(player.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 1.0f, 1.0f);
        }
    }

    private boolean isCategoryItem(Material material) {
        return material == Material.CYAN_STAINED_GLASS ||
                material == Material.AMETHYST_SHARD ||
                material == Material.PRISMARINE_CRYSTALS ||
                material == Material.NETHER_STAR ||
                material == Material.GLOWSTONE_DUST ||
                material == Material.CLOCK;
    }

    private void handleCategoryClick(Player player, ItemStack item) {
        String itemName = ChatColor.stripColor(item.getItemMeta().getDisplayName());

        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for (String key : guiManager.getCategories().keySet()) {
            TrashCategory2025 category = guiManager.getCategory(key);
            if (category.getName().equals(itemName)) {
                processTrashSorting(player, category);
                return;
            }
        }
    }

    private void processTrashSorting(Player player, TrashCategory2025 category) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º—É—Å–æ—Ä –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        boolean hasTrash = false;
        int trashCount = 0;

        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && !item.getType().isAir()) {
                hasTrash = true;
                trashCount++;
            }
        }

        if (!hasTrash) {
            player.sendMessage("üî¥ ¬ßc–í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –º—É—Å–æ—Ä–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏!");
            player.playSound(player.getLocation(), Sound.ENTITY_VILLAGER_NO, 1.0f, 1.0f);
            return;
        }

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (1-8 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
        int itemsSorted = Math.min((int) (Math.random() * 8) + 1, trashCount);
        double co2Saved = category.getCo2Saving() * itemsSorted * category.getEfficiency();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statsManager.addTrashSorted(player, category.getName().toLowerCase().replace(" ", "_"), co2Saved);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        player.sendMessage("‚úÖ ¬ßa–£—Å–ø–µ—à–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ¬ße" + itemsSorted + " ¬ßa–ø—Ä–µ–¥–º–µ—Ç–æ–≤!");
        player.sendMessage("‚ôªÔ∏è ¬ßb–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category.getColor() + category.getName());
        player.sendMessage("üå± ¬ß6–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ CO2: ¬ße" + String.format("%.2f", co2Saved) + " –∫–≥");
        player.sendMessage("‚ö° ¬ß3–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ¬ßb" + (int)(category.getEfficiency() * 100) + "%");

        player.playSound(player.getLocation(), Sound.BLOCK_COMPOSTER_FILL_SUCCESS, 1.0f, 1.2f);
        player.closeInventory();
    }
}